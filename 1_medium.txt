Dart SIMD extensions (Int32x4, Float32x4) going crazy: slow in AoT, different results on ARM and Intel


I've been playing with SIMD classes from [dart:typed_data](https://api.dart.dev/stable/2.18.6/dart-typed_data/dart-typed_data-library.html), specifically Int32x4 and Float32x4. Tested my code on Apple Silicon Mac (M1 Pro) and Linux VM (Intel® Core™ i5-8257U CPU @ 1.40GHz).


Here's the [file](https://github.com/maxim-saplin/mandelbrot/blob/main/_optimized/mandelbrot.dart). You can run it:
1. Via Dart VM: `dart mandelbrot.dart`
2. by building (Ahead-of-Time compilation) and running the executable:
```
dart compile exe mandelbrot.dart 
./mandelbrot.exe
```


The point of interest is `Uint8List mandelbrot()` function. Same Dart code executed on 2 different CPU architectures in 2 different modes.


What shocked me:
1. AoT was **~40-50 times slower** than VM on both ARM and Intel machines:


> **ARM** VM - Avg: 93.4ms, StdDev: 1.6119%; AoT - Avg: 4038.5ms, StdDev: 0.6437%


> **Intel** VM - Avg: 162.9ms, StdDev: 7.5598%; AoT - Avg: 8806.0ms, StdDev: 4.4871%


... what kind of performance one might get when utilising SIMD with Flutter apps which are AoT in Release modes...


2. Huge **discrepancies in results**, by simply calculating the sum of the elements produced by the function (the right one is 78513425) we get discrepancies within 10% range. Few tenth of a percent would be fine, assuming floating point math and precision differences. 1% is already a lot, 10% is crazy:


> **ARM** VM sum 78513692; AoT sum 78513692


> **Intel** VM sum 87667671; AoT sum 78513692


Am I doing something wrong?


JIC, here's the function:
```dart
Uint8List mandelbrot() {
  var output = Uint8List(width * height);
  final escapeThreshold = Float32x4(4.0, 4.0, 4.0, 4.0);


  for (int h = 0; h < height; h++) {
  double cy = min_y + h * scaley;
  Float32x4 cy4 = Float32x4.splat(cy);


  for (int w = 0; w < width; w += 4) {
  Float32x4 cxx4 = Float32x4(min_x + w * scalex, min_x + (w + 1) * scalex,
  min_x + (w + 2) * scalex, min_x + (w + 3) * scalex);
  Float32x4 zx = cxx4;
  Float32x4 zy = cy4;
  Int32x4 nv4 = Int32x4(0, 0, 0, 0);
  int mask = 1;
  var iter = 2;


  while (mask > 0) {
  Float32x4 zzx = zx * zx;
  Float32x4 zzy = zy * zy;


  Float32x4 new_zx = (zzx - zzy) + cxx4;
  zy = (zx * zy) + (zx * zy) + cy4;
  zx = new_zx;


  var sum = zzx + zzy;


  Int32x4 breakCondition = (escapeThreshold).greaterThan(sum);
  nv4 += breakCondition & Int32x4(1, 1, 1, 1);


  iter++;
  if (iter > MAX_ITERS) {
  break;
  }
  mask = breakCondition.signMask;
  }


  output[h * width + w] = nv4.x;
  output[h * width + w + 1] = nv4.y;
  output[h * width + w + 2] = nv4.z;
  output[h * width + w + 3] = nv4.w;
  }
  }


  return output;
}
```


Same Dart code is supposed to work OK no matter VM or AoT, ARM or Intel.


Environments:
- macOS 13.6, Dart SDK version: 3.1.2, MacBook Pro with M1 Pro CPU
- Ubuntu 22.04.3 LTS, 64 bit, Dart SDK version: 3.1.0, Intel Core i5-8257U @ 1.4GHz x 2, VMWare Workstation Player 17.0.1